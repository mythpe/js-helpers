/*!
 * MyTh Ahmed Faiz Copyright Â© 2016-2023 All rights reserved.
 * Email: mythpe@gmail.com
 * Mobile: +966590470092
 * Website: https://www.4myth.com
 * Github: https://github.com/mythpe
 */
@use "sass:map";

.m--datatable-component {
  .m--control-cell > * {
    margin-left: 5px;
    margin-bottom: 5px;
  }
}

.touch {
  .m--dt-btn-tooltip {
    display: none !important;
  }
}

$text-light-color: #000000 !default;
$text-dark-color: #ffffff !default;
.body--light {
  .text-color {
    color: $text-light-color !important;
  }
}

.body--dark {
  .text-color {
    color: $text-dark-color !important;
  }
}

$m-space-base: $space-base !default;
$container-max-width: 1024px !default;
.container-max-width {
  max-width: $container-max-width !important;
  margin: auto !important;
}

.m--row, .m--column, .m--flex {
  display: flex;
  flex-wrap: wrap;
}

.m--container {
  &:not(.m--container--dense):not(.dense) {
    padding: ($m-space-base * .5);

    > {
      .m--row + .m--row,
      .m--column + .m--column {
        margin-top: ($m-space-base * .5);
      }
    }
  }
}

.m--form {
  &:not(.m--container--dense):not(.dense) {

    > {
      .m--row + .m--row,
      .m--column + .m--column {
        margin-top: ($m-space-base * .5);
      }
    }
  }
}

.flex-break {
  flex: 1 0 100% !important;
  padding: 0 !important;
  margin: 0 !important;
}

.row, .m--row {
  > {
    .flex-break {
      height: 0 !important
    }
  }
}

.column, .m--column {
  > {
    .flex-break {
      width: 0 !important
    }
  }
}

$directions: ("rtl": rtl, "ltr": ltr);
@each $name, $value in $directions {
  .#{$name} {
    direction: map.get($directions, $value) !important;
  }
}

$text-decorations: ("none": none, "overline": overline, "underline": overline, "line-through": line-through);
@each $name, $value in $text-decorations {
  .text-decoration-#{$name} {
    text-decoration: map.get($text-decorations, $value) !important;
  }
}

$text-wraps: ("wrap": wrap, "nowrap": nowrap, "balance": balance, "pretty": pretty, "stable": stable);
@each $name, $value in $text-wraps {
  .text-wrap-#{$name} {
    text-wrap: map.get($text-wraps, $value) !important;
  }
}

$break-avoids: ("inside", "after", "before");
@each $break-avoid in $break-avoids {
  .break-#{$break-avoid}-avoid {
    page-break-#{$break-avoid}: avoid !important;
  }
}

$maxes: ("width", "height") !default;
@each $max in $maxes {
  .max-#{$max} {
    max-#{$max}: 100% !important;
  }
}


.m--confirm.actions-between {
  .q-card__actions {
    justify-content: space-between !important;
  }
}

.pre {
  max-width: 100%;
  white-space-collapse: preserve-breaks;
  white-space: pre-line;
}

$alignsX: ("top", "bottom") !default;
$alignsY: ("left", "right") !default;
$radius-class-name: "border-rounded" !default;
$radius-value: $generic-border-radius !default;
$bordered-class-name: "bordered" !default;
$bordered-size: 1px !default;
$bordered-style: $bordered-size solid $primary !default;

.#{$radius-class-name} {
  border-radius: $radius-value;
}

.#{$bordered-class-name} {
  border: $bordered-style;
}

@each $x in $alignsX {
  .bordered-#{$x} {
    border-#{$x}: $bordered-style;
  }
  .#{$radius-class-name}-#{$x} {
    border-#{$x}-left-radius: $radius-value;
    border-#{$x}-right-radius: $radius-value;
  }

  @each $y in $alignsY {
    .#{$radius-class-name}-#{$x}-#{$y} {
      border-#{$x}-#{$y}-radius: $radius-value;
    }

    .#{$radius-class-name}-#{$y} {
      border-bottom-#{$y}-radius: $radius-value;
      border-top-#{$y}-radius: $radius-value;
    }

    .bordered-#{$y} {
      border-#{$y}: $bordered-style;
    }
  }
}
